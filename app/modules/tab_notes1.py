# app/modules/tab_notes.py
from shiny import ui

def panel():
    return ui.nav_panel(
        "부록1",
        ui.layout_columns(
            ui.card(
                ui.card_header("점수 산정 기준"),
                ui.markdown(
                    """
- **건물노후도점수** : 사용승인연도에서 경과연수 계산 후 구간 점수 부여  
  **40년≥: 5점 / 30–39: 4점 / 20–29: 3점 / 10–19: 2점 / 0–9: 1점 / 그 외·미상: 0점**  

- **지상층수점수** : 지상층수 구간별 점수  
  **30층≥: 5점 / 20–29: 4점 / 10–19: 3점 / 5–9: 2점 / 1–4: 1점 / 0층·미상: 0점**  

- **지하층수점수** : 지하층수 구간별 점수  
  **3층≥: 3점 / 2층: 2점 / 1층: 1점 / 0·미상: 0점**  

- **주용도점수** : 정확 일치 매핑 사용(예시):  
  **9점:** 숙박시설, 야영장시설, 관광휴게시설 등  
  **8점:** 공장, 창고시설  
  **7점:** 노유자시설, 교육연구(및 복지)시설, 의료시설, 수련시설  
  **5점:** 근린생활/판매/문화/업무/생활편익 등  
  **4점:** 교정·군사·운수·환경처리·통신·자동차·장례·발전·묘지 등 기반시설  
  **2점:** 단독/공동/다가구 주택  
  **1점:** 공공용시설  
  **0점:** 미매핑/미상  

- **구조점수** : 정확 일치 매핑:  
  **5점:** 목구조(일반목구조, 통나무 등)  
  **4점:** 조적식/석재/블록 등  
  **3점:** 조립식판넬/컨테이너  
  **2점:** 철골 계열(일반/경량철골, 강파이프, 트러스 등) + 철골·콘크리트 복합  
  **1점:** 막구조·기타    
  **0점:** 콘크리트 계열(철근콘크리트, 콘크리트, 라멘 등)  

- **비상용승강기점수** : 비상용승강기 개수에 따라 점수 부여  
  대수 **0: 5 / 1: 4 / 2: 3 / 3: 2 / 4: 1 / 5대 이상: 0**

- **소방서거리점수** : 소방서와의 거리 구간별 점수  
  **<1km: 1 / <3km: 2 / <5km: 3 / <7km: 4 / <9km: 5**

- **소방용수시설거리점수** : 소방용수시설과의 거리 구간별 점수  
  **≤30m: 1 / ≤60m: 2 / ≤90m: 3 / ≤120m: 4 / ≤150m: 5**

- **종합점수** : 아래 **8개 지표의 합**으로 산출:  
  건물노후도 + 지상층수 + 지하층수 + 주용도 + 구조 + 비상용승강기 + 소방서거리 + 소방용수시설거리

                    """
                ),
                style="max-width: 1100px; margin: 0 auto;"
            ),

            ui.card(
                ui.card_header("위치 제안 로직"),
                ui.markdown(
                    """
### 아이디어
- **격자 기반 스코어링**: 관심 영역(AOI)을 일정 크기 셀(예: 100m)로 분할 → 각 셀에 포함된 **건물 위험도**를 합산  
- **설비 가용권 제외**: **소방용수시설 100m**, **소방서 4km** 버퍼 내 셀은 제외하여 **설비 공백지**를 탐지

### 파이프라인
1. **AOI 설정**  
   - 행정동(예: 하빈면, 가창면 등) 다각형을 선택하고 CRS를 **EPSG:5186**(m 단위)로 변환
2. **정사각형 격자 생성(기본 100m)**  
   - AOI 경계를 bounding box로 받아 타일링 → AOI로 **clip** → **EPSG:4326**으로 복원
3. **버퍼 생성**  
   - **소방용수시설**: 포인트 → 5186 변환 → **100m buffer** → 4326 복원 → 전체 union  
   - **소방서**: 포인트 → 5186 변환 → **4000m buffer** → 4326 복원 → union
4. **격자 필터링(설비 공백)**  
   - 격자 중 **용수시설 100m 버퍼와 겹치지 않고**, 동시에 **소방서 4km 버퍼와도 겹치지 않는** 셀만 남김
5. **건물-셀 공간조인**  
   - 건물 포인트(`위도/경도`)를 GeoDataFrame으로 변환 → sjoin(within)으로 셀에 귀속  
   - 조인 전 `index_left/right` 이름 충돌 방지(필요 시 drop)
6. **셀 점수 산정**  
   - 각 건물의 지표(예: **주용도점수 + 건물노후도점수**)를 합산해 **cell_id별 score_sum** 계산  
   - `score_sum > 0` 셀만 **가시화 대상**
7. **시각화(지도)**  
   - Plotly Mapbox(OpenStreetMap 스타일)로 셀 폴리곤 표시  
   - **흰→빨강** 연속 색상(낮은 점수=흰색, 취약할수록 진한 빨강)
                    """
                ),
                style="max-width: 1100px; margin: 0 auto;"
            ),
            col_widths=[6, 6],
        ),
        ui.div(style="height: 8px;")
    )

def server(input, output, session):
    pass
