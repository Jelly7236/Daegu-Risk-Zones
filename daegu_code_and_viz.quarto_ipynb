{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Daegu Risk Zones\"\n",
        "format:\n",
        "  html:\n",
        "    theme: cosmo\n",
        "    toc: true\n",
        "    toc-depth: 2\n",
        "    code-fold: true\n",
        "    code-tools: true\n",
        "execute:\n",
        "  echo: true\n",
        "  warning: false\n",
        "  message: false\n",
        "  freeze: auto\n",
        "jupyter: python3\n",
        "lang: ko\n",
        "---\n",
        "\n",
        "## 1) 코드\n",
        "\n",
        "\n",
        "### 데이터 확인 1: 결측치 전체 확인"
      ],
      "id": "04307a0f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "df_building_original = pd.read_csv(\"./Data/건축물대장_통합.csv\")\n",
        "\n",
        "# 주요 컬럼별 결측치 개수 확인\n",
        "print(\"대지위치 결측:\", df_building_original[\"대지위치\"].isna().sum())\n",
        "print(\"지상층수 결측:\", df_building_original[\"지상층수\"].isna().sum())\n",
        "print(\"높이(m) 결측:\", df_building_original[\"높이(m)\"].isna().sum())\n",
        "print(\"구조코드명 결측:\", df_building_original[\"구조코드명\"].isna().sum())\n",
        "print(\"기타구조 결측:\", df_building_original[\"기타구조\"].isna().sum())\n",
        "print(\"사용승인년도 결측:\", df_building_original[\"사용승인년도\"].isna().sum())\n",
        "print(\"위도 결측:\", df_building_original[\"위도\"].isna().sum())\n",
        "print(\"경도 결측:\", df_building_original[\"경도\"].isna().sum())\n",
        "print(\"위도/경도 모두 결측:\", (df_building_original[\"위도\"].isna() & df_building_original[\"경도\"].isna()).sum())"
      ],
      "id": "c53c5be3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 데이터 확인 2-1: 위경도 결측치 중 구조코드명별 퍼센트"
      ],
      "id": "528f094a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 위경도 결측치 중 구조코드명별 퍼센트\n",
        "df_building_filter = df_building_original.loc[df_building_original[\"위도\"].isna() & df_building_original[\"경도\"].isna(), :]\n",
        "\n",
        "df_building_grouped = (\n",
        "    df_building_filter.groupby('구조코드명', dropna=False)\n",
        "    .size()\n",
        "    .rename('수')\n",
        "    .reset_index()\n",
        ")\n",
        "df_building_grouped['퍼센트'] = (df_building_grouped['수'] / len(df_building_filter) * 100).round(2)\n",
        "df_building_grouped = df_building_grouped.sort_values(['수','구조코드명'], ascending=[False, True], ignore_index=True)\n",
        "df_building_grouped"
      ],
      "id": "f649c6df",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 데이터 확인 2-2: 위경도 결측치 중 일반목구조 비율"
      ],
      "id": "0977d992"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 위경도 결측치 중 일반목구조가 전체 일반목구조에 어느정도 해당하는지\n",
        "original_wooden_structure = ((df_building_original[\"구조코드명\"] == \"일반목구조\") & (df_building_original[\"위도\"].notna())).sum()\n",
        "filter_wooden_structure = df_building_grouped.loc[df_building_grouped[\"구조코드명\"] == \"일반목구조\", \"수\"].values[0]\n",
        "(filter_wooden_structure / original_wooden_structure * 100).round(2)"
      ],
      "id": "6a380f23",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 위도 경도 컬럼 추가"
      ],
      "id": "607f6ebe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "import os\n",
        "import time\n",
        "import json\n",
        "import requests\n",
        "import pandas as pd\n",
        "\n",
        "# 기본 설정\n",
        "KAKAO_REST_KEY = \"f939970b0ab002e6aa011535f5388344\"\n",
        "KAKAO_URL = \"https://dapi.kakao.com/v2/local/search/address.json\"\n",
        "HEADERS = {\"Authorization\": f\"KakaoAK {KAKAO_REST_KEY}\"}\n",
        "REQUEST_INTERVAL = 0.15\n",
        "CACHE_PATH = \"./kakao_geocode_cache.json\"\n",
        "\n",
        "\n",
        "# 캐시 로드/세이브\n",
        "def load_cache(path=CACHE_PATH):\n",
        "    if os.path.exists(path):\n",
        "        try:\n",
        "            with open(path, \"r\", encoding=\"utf-8\") as f:\n",
        "                return json.load(f)\n",
        "        except:\n",
        "            return {}\n",
        "    return {}\n",
        "\n",
        "def save_cache(cache, path=CACHE_PATH):\n",
        "    try:\n",
        "        with open(path, \"w\", encoding=\"utf-8\") as f:\n",
        "            json.dump(cache, f, ensure_ascii=False)\n",
        "    except:\n",
        "        pass\n",
        "\n",
        "cache = load_cache()\n",
        "\n",
        "# 카카오 지오코딩 함수\n",
        "def kakao_geocode(address):\n",
        "    if not isinstance(address, str) or not address.strip():\n",
        "        return None\n",
        "\n",
        "    addr = address.strip()\n",
        "    if addr in cache:\n",
        "        return cache[addr]\n",
        "\n",
        "    params = {\"query\": addr}\n",
        "    try:\n",
        "        r = requests.get(KAKAO_URL, headers=HEADERS, params=params, timeout=10)\n",
        "        if r.status_code == 200:\n",
        "            data = r.json()\n",
        "            docs = data.get(\"documents\", [])\n",
        "            if docs:\n",
        "                d0 = docs[0]\n",
        "                lon, lat = float(d0[\"x\"]), float(d0[\"y\"])\n",
        "                result = {\"lat\": lat, \"lon\": lon}\n",
        "            else:\n",
        "                result = None\n",
        "        else:\n",
        "            result = None\n",
        "    except:\n",
        "        result = None\n",
        "\n",
        "    cache[addr] = result\n",
        "    save_cache(cache)\n",
        "    time.sleep(REQUEST_INTERVAL)\n",
        "    return result\n",
        "\n",
        "# CSV 불러오기\n",
        "df_building_original = pd.read_csv(\n",
        "    \"../Raw Data/건축물대장/건축물대장_대구광역시_종합.csv\",\n",
        "    sep=None, engine=\"python\"\n",
        ")\n",
        "\n",
        "df_building_filter = df_building_original[[\n",
        "    \"대지위치\", \"지상층수\", \"지하층수\", \"높이(m)\", \"구조코드명\", \"기타구조\", \"주용도코드명\", \"비상용승강기수\"\n",
        "]].copy()\n",
        "\n",
        "df_building_filter[\"사용승인년도\"] = df_building_original[\"사용승인일\"].astype(str).str.slice(0, 4)\n",
        "\n",
        "# 1만개씩 나누기\n",
        "df_building_temp = df_building_filter.loc[:10000, :].copy()\n",
        "\n",
        "# 좌표 변환 적용\n",
        "df_building_temp[\"위도\"] = None\n",
        "df_building_temp[\"경도\"] = None\n",
        "\n",
        "for i, addr in enumerate(df_building_temp[\"대지위치\"].dropna().unique(), 1):\n",
        "    geo = kakao_geocode(addr)\n",
        "    if geo:\n",
        "        df_building_temp.loc[df_building_temp[\"대지위치\"] == addr, \"위도\"] = geo[\"lat\"]\n",
        "        df_building_temp.loc[df_building_temp[\"대지위치\"] == addr, \"경도\"] = geo[\"lon\"]\n",
        "    if i % 500 == 0:\n",
        "        print(f\"{i} / {len(df_building_temp['대지위치'].dropna().unique)} 처리 완료\")\n",
        "\n",
        "# 저장\n",
        "df_building_temp.to_csv(\n",
        "    \"../Raw Data/건축물대장_위도경도포함/1.csv\",\n",
        "    index=False, encoding=\"utf-8-sig\"\n",
        ")\n",
        "print(\"저장 완료\")\n",
        "\n",
        "# 파일 합치기\n",
        "files = [\n",
        "    \"../Raw Data/건축물대장_위도경도포함/건축물2_좌표.csv\",\n",
        "    \"../Raw Data/건축물대장_위도경도포함/건축물대장1_1.csv\",\n",
        "    \"../Raw Data/건축물대장_위도경도포함/건축물대장1_2.csv\",\n",
        "    \"../Raw Data/건축물대장_위도경도포함/건축물대장1_3.csv\",\n",
        "    \"../Raw Data/건축물대장_위도경도포함/건축물대장1_4.csv\",\n",
        "    \"../Raw Data/건축물대장_위도경도포함/건축물대장1_5.csv\",\n",
        "    \"../Raw Data/건축물대장_위도경도포함/건축물대장1_6.csv\",\n",
        "    \"../Raw Data/건축물대장_위도경도포함/대구_건축물대장_2(6~80000).csv\",\n",
        "    \"../Raw Data/건축물대장_위도경도포함/대구_건축물대장_all.csv\",\n",
        "    \"../Raw Data/건축물대장_위도경도포함/건축물대장(30000~49999).csv\"\n",
        "]\n",
        "\n",
        "# 뽑을 컬럼 목록\n",
        "columns_to_keep = [\n",
        "    \"대지위치\", \"지상층수\", \"지하층수\", \"높이(m)\", \"구조코드명\", \"기타구조\",\n",
        "    \"주용도코드명\", \"비상용승강기수\", \"사용승인년도\", \"위도\", \"경도\"\n",
        "]\n",
        "\n",
        "dfs = []\n",
        "\n",
        "for file in files:\n",
        "    df = pd.read_csv(file, encoding=\"utf-8\")\n",
        "    \n",
        "    existing_cols = [col for col in columns_to_keep if col in df.columns]\n",
        "    df = df[existing_cols]\n",
        "    \n",
        "    dfs.append(df)\n",
        "\n",
        "merged_df = pd.concat(dfs, ignore_index=True)\n",
        "\n",
        "# 저장\n",
        "merged_df.to_csv(\"./Data/건축물대장_통합.csv\", index=False, encoding=\"utf-8-sig\")"
      ],
      "id": "ee59b6e1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 소화전/소방서 최소거리 컬럼 추가"
      ],
      "id": "acd5f641"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# 데이터 불러오기\n",
        "df_building = pd.read_csv('./Data/건축물대장_통합.csv')\n",
        "df_hydrant = pd.read_csv('./Data/대구_소방장치_위치.csv')\n",
        "df_firestation = pd.read_csv('./Data/대구_소방서_위치.csv')\n",
        "\n",
        "# 거리계산 함수 정의\n",
        "def haversine_min_distance(lat1, lon1, hy_lats, hy_lons):\n",
        "    R = 6371000  # 지구 반지름 (m)\n",
        "    lat1 = np.radians(lat1)\n",
        "    lon1 = np.radians(lon1)\n",
        "    dlat = hy_lats - lat1\n",
        "    dlon = hy_lons - lon1\n",
        "    a = np.sin(dlat / 2)**2 + np.cos(lat1) * np.cos(hy_lats) * np.sin(dlon / 2)**2\n",
        "    c = 2 * np.arcsin(np.sqrt(a))\n",
        "    distances = R * c\n",
        "    return distances.min()\n",
        "\n",
        "# 위경도 라디안화\n",
        "hydrant_lats = np.radians(df_hydrant[\"위도\"].values)\n",
        "hydrant_lons = np.radians(df_hydrant[\"경도\"].values)\n",
        "station_lats = np.radians(df_firestation[\"위도\"].values)\n",
        "station_lons = np.radians(df_firestation[\"경도\"].values)\n",
        "\n",
        "# 소화전거리 계산 및 추가\n",
        "df_building['소화전거리'] = df_building.apply(\n",
        "    lambda row: haversine_min_distance(row[\"위도\"], row[\"경도\"], hydrant_lats, hydrant_lons),\n",
        "    axis=1\n",
        ")\n",
        "# 소방서거리 계산 및 추가\n",
        "df_building[\"소방서거리\"] = df_building.apply(\n",
        "    lambda row: haversine_min_distance(row[\"위도\"], row[\"경도\"], station_lats, station_lons),\n",
        "    axis=1\n",
        ")\n",
        "\n",
        "# 결과 저장\n",
        "df_building.to_csv('./Data/건축물대장_소화전_소방서거리.csv', index=False)"
      ],
      "id": "b84446ed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 건축물 종합 점수 산정"
      ],
      "id": "c7cbc3dc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "from datetime import date\n",
        "import math, re\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "def _parse_year(value):\n",
        "    if value is None:\n",
        "        return None\n",
        "    if isinstance(value, float) and math.isnan(value):\n",
        "        return None\n",
        "    if isinstance(value, int):\n",
        "        return value\n",
        "    if isinstance(value, float):\n",
        "        return int(value)\n",
        "    s = str(value).strip()\n",
        "    if s == \"\":\n",
        "        return None\n",
        "    s_num = s.replace(\",\", \"\")\n",
        "    if re.fullmatch(r\"[+-]?\\d+(\\.\\d+)?\", s_num):\n",
        "        try:\n",
        "            return int(float(s_num))\n",
        "        except Exception:\n",
        "            return None\n",
        "    m = re.search(r\"(\\d{4})\", s)\n",
        "    if m:\n",
        "        return int(m.group(1))\n",
        "    return None\n",
        "\n",
        "def aging_score(value):\n",
        "    year = _parse_year(value)\n",
        "    if year is None:\n",
        "        return 0\n",
        "    current_year = date.today().year\n",
        "    age = current_year - year\n",
        "    if age < 0 or year < 1800:\n",
        "        return 0\n",
        "    if age >= 40:\n",
        "        return 5\n",
        "    elif age >= 30:\n",
        "        return 4\n",
        "    elif age >= 20:\n",
        "        return 3\n",
        "    elif age >= 10:\n",
        "        return 2\n",
        "    elif age >= 0:\n",
        "        return 1\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "def _parse_floor_count(value):\n",
        "    if value is None:\n",
        "        return None\n",
        "    if isinstance(value, float) and math.isnan(value):\n",
        "        return None\n",
        "    if isinstance(value, (int, float)):\n",
        "        n = int(float(value))\n",
        "        return n if n >= 0 else None\n",
        "    s = str(value).strip()\n",
        "    if s == \"\":\n",
        "        return None\n",
        "    s_num = s.replace(\",\", \"\")\n",
        "    if re.fullmatch(r\"[+-]?\\d+(\\.\\d+)?\", s_num):\n",
        "        try:\n",
        "            n = int(float(s_num))\n",
        "            return n if n >= 0 else None\n",
        "        except Exception:\n",
        "            return None\n",
        "    m = re.search(r\"(-?\\d+)\", s)\n",
        "    if m:\n",
        "        n = int(m.group(1))\n",
        "        return n if n >= 0 else None\n",
        "    return None\n",
        "\n",
        "def aboveground_floors_score(value):\n",
        "    floors = _parse_floor_count(value)\n",
        "    if floors is None:\n",
        "        return 0\n",
        "    if floors >= 30:\n",
        "        return 5\n",
        "    elif floors >= 20:\n",
        "        return 4\n",
        "    elif floors >= 10:\n",
        "        return 3\n",
        "    elif floors >= 5:\n",
        "        return 2\n",
        "    elif floors >= 1:\n",
        "        return 1\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "def _parse_basement_floor_count(value):\n",
        "    if value is None:\n",
        "        return None\n",
        "    if isinstance(value, float) and math.isnan(value):\n",
        "        return None\n",
        "    if isinstance(value, (int, float)):\n",
        "        try:\n",
        "            n = int(float(value))\n",
        "            return abs(n) if n != 0 else 0\n",
        "        except Exception:\n",
        "            return None\n",
        "    s = str(value).strip()\n",
        "    if s == \"\":\n",
        "        return None\n",
        "    m = re.fullmatch(r\"[Bb]\\s*(\\d+)\\s*[Ff]?\", s)\n",
        "    if m:\n",
        "        return int(m.group(1))\n",
        "    m = re.search(r\"지하\\s*(\\d+)\", s)\n",
        "    if m:\n",
        "        return int(m.group(1))\n",
        "    m = re.search(r\"(-?\\d+)\", s.replace(\",\", \"\"))\n",
        "    if m:\n",
        "        try:\n",
        "            return abs(int(m.group(1)))\n",
        "        except Exception:\n",
        "            return None\n",
        "    return None\n",
        "\n",
        "def basement_floors_score(value):\n",
        "    floors = _parse_basement_floor_count(value)\n",
        "    if floors is None:\n",
        "        return 0\n",
        "    if floors >= 3:\n",
        "        return 3\n",
        "    elif floors >= 2:\n",
        "        return 2\n",
        "    elif floors >= 1:\n",
        "        return 1\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "MAIN_USE_SCORE_MAP = {\n",
        "    '숙박시설': 9.0,\n",
        "    '야영장시설': 9.0,\n",
        "    '관광휴게시설': 9.0,\n",
        "    '공장': 8.0,\n",
        "    '창고시설': 8.0,\n",
        "    '노유자시설': 7.0,\n",
        "    '교육연구시설': 7.0,\n",
        "    '교육연구및복지시설': 7.0,\n",
        "    '의료시설': 7.0,\n",
        "    '수련시설': 7.0,\n",
        "    '제2종근린생활시설': 5.0,\n",
        "    '근린생활시설': 5.0,\n",
        "    '제1종근린생활시설': 5.0,\n",
        "    '종교시설': 5.0,\n",
        "    '문화및집회시설': 5.0,\n",
        "    '운동시설': 5.0,\n",
        "    '업무시설': 5.0,\n",
        "    '판매시설': 5.0,\n",
        "    '위락시설': 5.0,\n",
        "    '판매및영업시설': 5.0,\n",
        "    '기타제1종근린생활시설': 5.0,\n",
        "    '생활편익시설': 5.0,\n",
        "    '소매점': 5.0,\n",
        "    '동물및식물관련시설': 4.0,\n",
        "    '위험물저장및처리시설': 4.0,\n",
        "    '자원순환관련시설': 4.0,\n",
        "    '분뇨.쓰레기처리시설': 4.0,\n",
        "    '방송통신시설': 4.0,\n",
        "    '자동차관련시설': 4.0,\n",
        "    '장례시설': 4.0,\n",
        "    '운수시설': 4.0,\n",
        "    '교정및군사시설': 4.0,\n",
        "    '국방,군사시설': 4.0,\n",
        "    '발전시설': 4.0,\n",
        "    '묘지관련시설': 4.0,\n",
        "    '단독주택': 2.0,\n",
        "    '공동주택': 2.0,\n",
        "    '다가구주택': 2.0,\n",
        "    '공공용시설': 1.0,\n",
        "}\n",
        "\n",
        "def main_use_score_exact(value) -> float:\n",
        "    if value is None:\n",
        "        return 0.0\n",
        "    if isinstance(value, float) and math.isnan(value):\n",
        "        return 0.0\n",
        "    s = str(value).strip()\n",
        "    if s == \"\" or s.lower() == \"nan\":\n",
        "        return 0.0\n",
        "    return MAIN_USE_SCORE_MAP.get(s, 0.0)\n",
        "\n",
        "STRUCTURE_SCORE_MAP = {\n",
        "    '철근콘크리트구조': 0.0,\n",
        "    '콘크리트구조': 0.0,\n",
        "    '프리케스트콘크리트구조': 0.0,\n",
        "    '보강콘크리트조': 0.0,\n",
        "    '기타콘크리트구조': 0.0,\n",
        "    '라멘조': 0.0,\n",
        "    '일반철골구조': 2.0,\n",
        "    '경량철골구조': 2.0,\n",
        "    '강파이프구조': 2.0,\n",
        "    '철파이프조': 2.0,\n",
        "    '기타강구조': 2.0,\n",
        "    '스틸하우스조': 2.0,\n",
        "    '단일형강구조': 2.0,\n",
        "    '철골구조': 2.0,\n",
        "    '공업화박판강구조(PEB)': 2.0,\n",
        "    '트러스구조': 2.0,\n",
        "    '철골콘크리트구조': 2.0,\n",
        "    '철골철근콘크리트구조': 2.0,\n",
        "    '철골철근콘크리트합성구조': 2.0,\n",
        "    '기타철골철근콘크리트구조': 2.0,\n",
        "    '일반목구조': 5.0,\n",
        "    '목구조': 5.0,\n",
        "    '통나무구조': 5.0,\n",
        "    '트러스목구조': 5.0,\n",
        "    '벽돌구조': 4.0,\n",
        "    '블록구조': 4.0,\n",
        "    '시멘트블럭조': 4.0,\n",
        "    '조적구조': 4.0,\n",
        "    '기타조적구조': 4.0,\n",
        "    '석구조': 4.0,\n",
        "    '흙벽돌조': 4.0,\n",
        "    '조립식판넬조': 3.0,\n",
        "    '컨테이너조': 3.0,\n",
        "    '막구조': 1.0,\n",
        "    '기타구조': 1.0,\n",
        "}\n",
        "\n",
        "def structure_score(value) -> float:\n",
        "    if value is None:\n",
        "        return 0.0\n",
        "    if isinstance(value, float) and math.isnan(value):\n",
        "        return 0.0\n",
        "    s = str(value).strip()\n",
        "    if not s or s.lower() == \"nan\":\n",
        "        return 0.0\n",
        "    if s in STRUCTURE_SCORE_MAP:\n",
        "        return STRUCTURE_SCORE_MAP[s]\n",
        "    if ('목' in s) or ('통나무' in s):\n",
        "        return 5.0\n",
        "    if ('조적' in s) or ('벽돌' in s) or ('블록' in s) or ('석' in s):\n",
        "        return 4.0\n",
        "    if ('조립' in s) or ('판넬' in s) or ('컨테이너' in s):\n",
        "        return 3.0\n",
        "    if ('철골' in s) or ('강구조' in s) or ('스틸' in s) or ('파이프' in s):\n",
        "        return 2.0\n",
        "    if ('막' in s) or ('특수' in s):\n",
        "        return 1.0\n",
        "    if ('콘크리트' in s) or ('라멘' in s):\n",
        "        return 0.0\n",
        "    return 0.0\n",
        "\n",
        "def _parse_nonneg_int_count(value):\n",
        "    if value is None:\n",
        "        return None\n",
        "    if isinstance(value, float) and math.isnan(value):\n",
        "        return None\n",
        "    if isinstance(value, (int, float)):\n",
        "        n = int(float(value))\n",
        "        return n if n >= 0 else None\n",
        "    s = str(value).strip()\n",
        "    if s == \"\" or s.lower() == \"nan\":\n",
        "        return None\n",
        "    m = re.search(r\"(\\d+)\", s.replace(\",\", \"\"))\n",
        "    if m:\n",
        "        n = int(m.group(1))\n",
        "        return n if n >= 0 else None\n",
        "    return None\n",
        "\n",
        "def emergency_elevator_score(value) -> float:\n",
        "    n = _parse_nonneg_int_count(value)\n",
        "    if n is None:\n",
        "        return 0.0\n",
        "    if n == 0:\n",
        "        return 5.0\n",
        "    elif n == 1:\n",
        "        return 4.0\n",
        "    elif n == 2:\n",
        "        return 3.0\n",
        "    elif n == 3:\n",
        "        return 2.0\n",
        "    elif n == 4:\n",
        "        return 1.0\n",
        "    else:\n",
        "        return 0.0\n",
        "    \n",
        "def firestation_distance_score(dist_m, cap_over_max=True, invalid_to_nan=True):\n",
        "    arr = np.asarray(dist_m, dtype=float)\n",
        "    if invalid_to_nan:\n",
        "        arr = np.where(arr < 0, np.nan, arr)\n",
        "    default_val = 5.0 if cap_over_max else np.nan\n",
        "    scores = np.select(\n",
        "        [arr < 1000, arr < 3000, arr < 5000, arr < 7000, arr < 9000],\n",
        "        [1.0,        2.0,        3.0,        4.0,        5.0],\n",
        "        default=default_val\n",
        "    )\n",
        "    if np.isscalar(dist_m):\n",
        "        return float(scores.item())\n",
        "    if isinstance(dist_m, pd.Series):\n",
        "        return pd.Series(scores, index=dist_m.index, name=getattr(dist_m, \"name\", None))\n",
        "    return scores\n",
        "\n",
        "def hydrant_distance_score(dist_m, cap_over_max=True, invalid_to_nan=True):\n",
        "    arr = np.asarray(dist_m, dtype=float)\n",
        "    if invalid_to_nan:\n",
        "        arr = np.where(arr < 0, np.nan, arr)\n",
        "    default_val = 5.0 if cap_over_max else np.nan\n",
        "    scores = np.select(\n",
        "        [arr <= 30, arr <= 60, arr <= 90, arr <= 120, arr <= 150],\n",
        "        [1.0,       2.0,       3.0,       4.0,        5.0],\n",
        "        default=default_val\n",
        "    )\n",
        "    scores = np.where(np.isnan(arr), np.nan, scores)\n",
        "    if np.isscalar(dist_m):\n",
        "        return float(np.asarray(scores).item())\n",
        "    if isinstance(dist_m, pd.Series):\n",
        "        return pd.Series(scores, index=dist_m.index, name=getattr(dist_m, \"name\", None))\n",
        "    return scores\n",
        "\n",
        "# 점수 산정\n",
        "df = pd.read_csv(\"./Data/건축물대장_소화전_소방서거리.csv\")\n",
        "df[\"건물노후도점수\"] = df[\"사용승인년도\"].apply(aging_score)\n",
        "df[\"지상층수점수\"] = df[\"지상층수\"].apply(aboveground_floors_score)\n",
        "df[\"지하층수점수\"] = df[\"지하층수\"].apply(basement_floors_score)\n",
        "df[\"주용도점수\"] = df[\"주용도코드명\"].apply(main_use_score_exact)\n",
        "df[\"구조점수\"] = df[\"구조코드명\"].apply(structure_score)\n",
        "df[\"비상용승강기점수\"] = df[\"비상용승강기수\"].apply(emergency_elevator_score)\n",
        "df[\"소방서거리점수\"] = df[\"소방서거리\"].apply(firestation_distance_score)\n",
        "df[\"소화전거리점수\"] = df[\"소화전거리\"].apply(hydrant_distance_score)\n",
        "df[\"종합점수\"] = df[\"건물노후도점수\"] + df[\"지상층수점수\"] + df[\"지하층수점수\"] + df[\"주용도점수\"] + df[\"구조점수\"] + df[\"비상용승강기점수\"] + df[\"소방서거리점수\"] + df[\"소화전거리점수\"]\n",
        "\n",
        "df.to_csv(\"./Data/건축물대장_통합_점수.csv\")"
      ],
      "id": "498691ef",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 2) 시각화\n",
        "\n",
        "### 대구광역시 119안전센터 및 소화장치 위치 시각화"
      ],
      "id": "e661aeae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 대구광역시 119안전센터 및 소화장치 위치 시각화\n",
        "\n",
        "# 데이터 출처\n",
        "# 대구광역시_소방 긴급구조 비상 소화장치 현황\n",
        "# https://www.data.go.kr/data/15117284/fileData.do\n",
        "\n",
        "# 소방청_119안전센터 현황\n",
        "# https://www.data.go.kr/data/15065056/fileData.do\n",
        "\n",
        "import pandas as pd \n",
        "import numpy as np\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "loc_119 = pd.read_csv(\"./Data/대구_소방서_위치.csv\")\n",
        "loc_fire = pd.read_csv(\"./Data/대구_소방장치_위치.csv\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# 대구광역시 구별 소방 안전센터 시각화 \n",
        "import json\n",
        "with open (\"./Data/시각화/대구_시군구_군위포함/대구_시군구_군위포함.geojson\", encoding='utf-8') as f:\n",
        "    geojson_data = json.load(f)\n",
        "# print(geojson_data.keys())\n",
        "\n",
        "# 구별 소방 안전센터 scatter_mapbox\n",
        "fig = px.scatter_mapbox(\n",
        "    loc_119, lat=\"위도\", lon=\"경도\", color=\"구이름\",\n",
        "    hover_name=\"119안전센터명\",\n",
        "    hover_data={\"위도\": False, \"경도\": False, \"구이름\": True, \"동이름\": True},\n",
        "    zoom=11,\n",
        "    height=650,\n",
        ")\n",
        "fig.update_traces(marker=dict(size=15))\n",
        "\n",
        "# 구별 소방 긴급구조 비상 소화장치 scatter mapbox\n",
        "fig.add_trace(go.Scattermapbox(\n",
        "    lat=loc_fire[\"위도\"],\n",
        "    lon=loc_fire[\"경도\"],\n",
        "    mode=\"markers\",\n",
        "    marker=go.scattermapbox.Marker(size=5, color=\"blue\"),\n",
        "    name=\"소화장치\",\n",
        "    hovertemplate=\"<b>구:</b> %{customdata[0]}<br><b>동:</b> %{customdata[1]}<extra></extra>\",\n",
        "    customdata=loc_fire[[\"구이름\", \"동이름\"]].values,\n",
        "))\n",
        "\n",
        "fig.update_layout(\n",
        "    mapbox_style=\"carto-positron\",\n",
        "    mapbox_layers=[\n",
        "        {\n",
        "            \"sourcetype\": \"geojson\",\n",
        "            \"source\": geojson_data,\n",
        "            \"type\": \"line\",\n",
        "            \"color\": \"green\",\n",
        "            \"line\": {\"width\": 1},\n",
        "        }\n",
        "    ],\n",
        "    mapbox_center={\"lat\": 35.8714, \"lon\": 128.6014},\n",
        "    margin={\"r\":0, \"t\":30, \"l\":0, \"b\":0},\n",
        ")\n",
        "fig.show()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "#======================================\n",
        "# 노령 인구 비율 시각화\n",
        "#======================================\n",
        "\n",
        "# 동별 노령인구 비율 시각화\n",
        "import pandas as pd \n",
        "import numpy as np\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "df = pd.read_csv(\"./Data/동별인구.csv\")\n",
        "new = df[['군·구', '동·읍·면', '고령자_비율','위도','경도']]\n",
        "\n",
        "# 동별 고령자 비율 값\n",
        "g2_by_dong = new.groupby(['동·읍·면'])[['고령자_비율']].sum()\n",
        "g2_by_dong = g2_by_dong.sort_values(by='고령자_비율',ascending=False)\n",
        "g2_by_dong.rename(columns={'고령자_비율': '고령자_평균비율'}, inplace=True)\n",
        "g2_by_dong = g2_by_dong.reset_index()\n",
        "# g2_by_dong.info()\n",
        "\n",
        "import geopandas as gpd\n",
        "gdf = gpd.read_file(\"./Data/시각화/대구_행정동/대구_행정동_군위포함.shp\")\n",
        "print(gdf.crs)\n",
        "gdf = gdf.to_crs(epsg=4326)\n",
        "# gdf.to_file(\"./Data/대구_행정동_군위포함.geojson\", driver=\"GeoJSON\")\n",
        "\n",
        "import json\n",
        "with open(\"./Data/시각화/대구_행정동/대구_행정동_군위포함.geojson\", encoding='utf-8') as f:\n",
        " geojson_data = json.load(f)\n",
        "# print(geojson_data.keys())\n",
        "# print(geojson_data['features'][0]['properties'])\n",
        "\n",
        "# gdf 파일에 유천동이 없고 g2_by_dong 파일에 유천동이 있어 행 삭제\n",
        "cond = (gdf['ADM_DR_CD'] == '유천동')\n",
        "gdf[cond]\n",
        "g2_by_dong.rename(columns={'동·읍·면': 'ADM_DR_NM'}, inplace=True)\n",
        "cond = (g2_by_dong['ADM_DR_NM'] == '유천동')\n",
        "g2_by_dong = g2_by_dong.drop(g2_by_dong[cond].index)\n",
        "\n",
        "# 불로봉무동 이름 변경\n",
        "g2_by_dong.loc[g2_by_dong['ADM_DR_NM'] == '불로봉무동', 'ADM_DR_NM'] = '불로·봉무동'\n",
        "\n",
        "\n",
        "# 동별 노령인구 비율 시각화\n",
        "fig = px.choropleth_mapbox(g2_by_dong,\n",
        " geojson=geojson_data,\n",
        " locations=\"ADM_DR_NM\",\n",
        " featureidkey=\"properties.ADM_DR_NM\",\n",
        " color=\"고령자_평균비율\",\n",
        " color_continuous_scale=\"Greens\",\n",
        " mapbox_style=\"carto-positron\",\n",
        " center={\"lat\":35.87702415809577, \"lon\":128.58970500739858},\n",
        " zoom=10,                \n",
        "opacity=0.7,               \n",
        "title=\"대구광역시 동별 노인평균인구비율\"  \n",
        ")\n",
        "fig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0}) \n",
        "fig.show() \n",
        "\n",
        "\n",
        "# ===================================\n",
        "# 구별 고령자 비율 평균\n",
        "g1_by_gu = new.groupby(['군·구'])[['고령자_비율']].mean()\n",
        "g1_by_gu = g1_by_gu.reset_index()\n",
        "g1_by_gu = g1_by_gu.sort_values(by='고령자_비율',ascending=False)\n",
        "g1_by_gu.rename(columns={'군·구': 'SIGUNGU_NM', '고령자_비율': '고령자_평균비율',}, inplace=True)\n",
        "\n",
        "\n",
        "import geopandas as gpd\n",
        "gdf2 = gpd.read_file(\"./Data/시각화/대구_시군구_군위포함/대구광역시_시군구_군위포함.shp\")\n",
        "print(gdf2.crs)\n",
        "gdf2 = gdf2.to_crs(epsg=4326)\n",
        "# gdf2.to_file(\"./Data/대구_시군구_군위포함.geojson\", driver=\"GeoJSON\")\n",
        "\n",
        "import json\n",
        "with open(\"./Data/시각화/대구_시군구_군위포함/대구_시군구_군위포함.geojson\", encoding='utf-8') as f:\n",
        " geojson_data2 = json.load(f)\n",
        "print(geojson_data2.keys())\n",
        "\n",
        "print(geojson_data2['features'][0]['properties'])\n",
        "\n",
        "# 구별 노령 인구 비율 시각화\n",
        "fig = px.choropleth_mapbox(g1_by_gu,\n",
        " geojson=geojson_data2,\n",
        " locations=\"SIGUNGU_NM\",\n",
        " featureidkey=\"properties.SIGUNGU_NM\",\n",
        " color=\"고령자_평균비율\",\n",
        " color_continuous_scale=\"Greens\",\n",
        " mapbox_style=\"carto-positron\",\n",
        " center={\"lat\":35.87702415809577, \"lon\":128.58970500739858},\n",
        " zoom=10,                \n",
        "opacity=0.7,               \n",
        "title=\"대구광역시 구별 노인평균인구비율\"  \n",
        ")\n",
        "fig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0}) \n",
        "fig.show()"
      ],
      "id": "2dced6f0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 건축물대장 시각화"
      ],
      "id": "d6c6d763"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# %% 라이브러리 호출\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import plotly.graph_objects as go\n",
        "import plotly.express as px\n",
        "# %% check\n",
        "# columns_to_check = ['Column14', 'Column15', 'Column60', 'Column61', 'Column67']\n",
        "# %% 구/군 별 데이터 로드\n",
        "df1 = pd.read_csv('./Raw Data/건축물대장/건축물대장_대구광역시_군위군.csv')\n",
        "df2 = pd.read_csv('./Raw Data/건축물대장/건축물대장_대구광역시_남구.csv')\n",
        "df3 = pd.read_csv('./Raw Data/건축물대장/건축물대장_대구광역시_달서구.csv')\n",
        "df4 = pd.read_csv('./Raw Data/건축물대장/건축물대장_대구광역시_달성군.csv')\n",
        "df5 = pd.read_csv('./Raw Data/건축물대장/건축물대장_대구광역시_동구.csv')\n",
        "df6 = pd.read_csv('./Raw Data/건축물대장/건축물대장_대구광역시_북구.csv')\n",
        "df7 = pd.read_csv('./Raw Data/건축물대장/건축물대장_대구광역시_서구.csv')\n",
        "df8 = pd.read_csv('./Raw Data/건축물대장/건축물대장_대구광역시_수성구.csv')\n",
        "df9 = pd.read_csv('./Raw Data/건축물대장/건축물대장_대구광역시_중구.csv')\n",
        "\n",
        "# %% 구/군 컬럼 추가\n",
        "df1['군/구'] = '군위군'\n",
        "df2['군/구'] = '남구'\n",
        "df3['군/구'] = '달서구'\n",
        "df4['군/구'] = '달성군'\n",
        "df5['군/구'] = '동구'\n",
        "df6['군/구'] = '북구'\n",
        "df7['군/구'] = '서구'\n",
        "df8['군/구'] = '수성구'\n",
        "df9['군/구'] = '중구'\n",
        "# %% 구/군 별 데이터 통합\n",
        "df_all = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8, df9], ignore_index=True)\n",
        "# %% 구조 분류 딕셔너리 정의\n",
        "structure_map = {\n",
        "    '목조 계열': ['일반목구조', '목구조', '트러스목구조', '통나무구조'],\n",
        "    '조적식 구조': ['석구조', '벽돌구조', '블록구조', '시멘트블럭조', '흙벽돌조', '조적구조', '기타조적구조'],\n",
        "    '콘크리트 계열': ['철근콘크리트구조','콘크리트구조','프리케스트콘크리트구조','보강콘크리트조','기타콘크리트구조','라멘조'],\n",
        "    '철골 계열': ['일반철골구조','경량철골구조','강파이프구조','철파이프조','기타강구조','스틸하우스조','단일형강구조','철골구조','공업화박판강구조(PEB)','트러스구조',\n",
        "    '철골콘크리트구조','철골철근콘크리트구조','철골철근콘크리트합성구조','기타철골철근콘크리트구조'],\n",
        "    '조립식·판넬·기타': ['조립식판넬조', '컨테이너조'],\n",
        "    '기타 / 특수 구조': ['막구조', '기타구조']\n",
        "}\n",
        "# %% 구조 분류\n",
        "def map_structure_type(name):\n",
        "    for group, items in structure_map.items():\n",
        "        if name in items:\n",
        "            return group\n",
        "    return '미분류'\n",
        "df_all['구조그룹'] = df_all['구조코드명'].apply(map_structure_type)\n",
        "# %% 건축 자재별 분포 시각화\n",
        "structure_counts = df_all['구조그룹'].value_counts()\n",
        "\n",
        "# 도넛차트 그리기\n",
        "fig = go.Figure(data=[go.Pie(\n",
        "    labels=structure_counts.index,\n",
        "    values=structure_counts.values,\n",
        "    hole=0.4,\n",
        "    textinfo='percent+label',\n",
        "    hoverinfo='label+value+percent',\n",
        "    insidetextorientation='radial'\n",
        ")])\n",
        "\n",
        "fig.update_layout(\n",
        "    title_text='건축 자재별 건물 분포',\n",
        "    annotations=[dict(text='', x=0.5, y=0.5, font_size=18, showarrow=False)],\n",
        "    showlegend=True\n",
        ")\n",
        "\n",
        "fig.show()\n",
        "# %% 주용도 분류 딕셔너리 정의\n",
        "building_use = {\n",
        "    '숙박/다중이용시설': ['숙박시설', '야영장시설', '관광휴게시설'],\n",
        "    '공장/창고시설': ['공장','창고시설'],\n",
        "    '교육/복지/의료/수련': ['노유자시설', '교육연구시설', '교육연구및복지시설', '의료시설', '수련시설'],\n",
        "    '상업/판매/문화/업무/근린/생활편익':\n",
        "    ['제2종근린생활시설',\n",
        "    '근린생활시설',\n",
        "    '제1종근린생활시설',\n",
        "    '종교시설',\n",
        "    '문화및집회시설',\n",
        "    '운동시설',\n",
        "    '업무시설',\n",
        "    '판매시설',\n",
        "    '위락시설',\n",
        "    '판매및영업시설',\n",
        "    '기타제1종근린생활시설',\n",
        "    '생활편익시설',\n",
        "    '소매점'],\n",
        "    '기반시설':\n",
        "    ['동물및식물관련시설',\n",
        "    '위험물저장및처리시설',\n",
        "    '자원순환관련시설',\n",
        "    '분뇨.쓰레기처리시설',\n",
        "    '방송통신시설',\n",
        "    '자동차관련시설',\n",
        "    '장례시설',\n",
        "    '운수시설',\n",
        "    '교정및군사시설',\n",
        "    '국방,군사시설',\n",
        "    '발전시설',\n",
        "    '묘지관련시설'],\n",
        "    '주거':\n",
        "    ['단독주택',\n",
        "    '공동주택',\n",
        "    '다가구주택'],\n",
        "    '행정/공공':\n",
        "    '공공용시설',\n",
        "}\n",
        "# %% 주용도 분류\n",
        "def use_type(name):\n",
        "    if not isinstance(name, str):\n",
        "        return '미분류'\n",
        "\n",
        "    for group, items in building_use.items():\n",
        "        if name in items:\n",
        "            return group\n",
        "    return '미분류'\n",
        "df_all['주용도그룹'] = df_all['주용도코드명'].apply(use_type)\n",
        "# %% 용도별 분포 시각화\n",
        "use_group_counts = df_all['주용도그룹'].value_counts()\n",
        "use_group_ratio = use_group_counts / use_group_counts.sum()\n",
        "\n",
        "# 2% 미만은 기타로 묶기\n",
        "threshold = 0.02\n",
        "labels = []\n",
        "values = []\n",
        "etc_total = 0\n",
        "\n",
        "for label, ratio in use_group_ratio.items():\n",
        "    if ratio >= threshold:\n",
        "        labels.append(label)\n",
        "        values.append(use_group_counts[label])\n",
        "    else:\n",
        "        etc_total += use_group_counts[label]\n",
        "\n",
        "# 기타 항목 추가\n",
        "if etc_total > 0:\n",
        "    labels.append('기타')\n",
        "    values.append(etc_total)\n",
        "\n",
        "# 도넛 차트 생성\n",
        "fig1 = go.Figure(data=[go.Pie(\n",
        "    labels=labels,\n",
        "    values=values,\n",
        "    hole=0.3,  # 도넛 중앙 구멍 작게 = 도넛 자체 크게\n",
        "    textinfo='percent+label',\n",
        "    hoverinfo='label+value+percent',\n",
        "    insidetextorientation='radial'\n",
        ")])\n",
        "\n",
        "# 레이아웃 조정\n",
        "fig1.update_layout(\n",
        "    title_text='주용도그룹 분포 (2% 미만 기타로 통합)',\n",
        "    annotations=[dict(text='주용도', x=0.5, y=0.5, font_size=20, showarrow=False)],\n",
        "    showlegend=True,\n",
        "    height=600,  # 높이 늘려서 크게 보기\n",
        "    width=700\n",
        ")\n",
        "\n",
        "fig1.show()\n",
        "# %% 용도, 자재 교차 분석 시각화\n",
        "cross_tab = pd.crosstab(df_all['주용도그룹'], df_all['구조그룹'])\n",
        "fig2 = go.Figure()\n",
        "for 구조 in cross_tab.columns:\n",
        "    fig2.add_trace(go.Bar(\n",
        "        x=cross_tab.index,\n",
        "        y=cross_tab[구조],\n",
        "        name=구조\n",
        "    ))\n",
        "\n",
        "# 레이아웃 설정\n",
        "fig2.update_layout(\n",
        "    barmode='stack',  # 스택형 막대\n",
        "    title='주용도그룹 vs 구조그룹 분포 (스택형 막대 그래프)',\n",
        "    xaxis_title='주용도그룹',\n",
        "    yaxis_title='건물 수',\n",
        "    legend_title='구조그룹',\n",
        "    template='plotly_white'\n",
        ")\n",
        "\n",
        "fig2.show()\n",
        "# %% 비상용 승강기 수 분포 시각화\n",
        "cond_elevator = df_all['지상층수'] >= 5\n",
        "emergency = df_all[cond_elevator]\n",
        "# 결측치 0으로 대치\n",
        "emergency['비상용승강기수'] = emergency['비상용승강기수'].fillna(0).astype(int)\n",
        "\n",
        "# 5개 이상은 '5개 이상'으로 범주화\n",
        "def categorize_elevators(x):\n",
        "    return str(x) if x < 5 else '5개 이상'\n",
        "\n",
        "emergency['비상용승강기_그룹'] = emergency['비상용승강기수'].apply(categorize_elevators)\n",
        "\n",
        "# 그룹별 건물 수 집계\n",
        "grouped = emergency['비상용승강기_그룹'].value_counts().sort_index().reset_index()\n",
        "grouped.columns = ['비상용승강기수', '건물수']\n",
        "\n",
        "# 파이차트 시각화 (파이 크기 크게 설정)\n",
        "fig = px.pie(grouped,\n",
        "             names='비상용승강기수',\n",
        "             values='건물수',\n",
        "             title='지상 5층 이상 건물의 비상용 승강기 수 분포',\n",
        "             width=700, height=700,  # 파이 크기 조절\n",
        "             color_discrete_sequence=px.colors.sequential.Magma)\n",
        "\n",
        "# 퍼센트와 라벨 모두 표시\n",
        "fig.update_traces(textinfo='percent+label',\n",
        "                  textfont_size=16,\n",
        "                  pull=[0.03]*len(grouped))  # 조각 약간 분리(선택)\n",
        "\n",
        "fig.show()\n",
        "# %% 사용승인일 이상값 탐색(보충 필요)\n",
        "df_all['사용승인일_길이'] = df_all['사용승인일'].astype(str).str.len()\n",
        "df_all['사용승인일_길이'].unique()\n",
        "cond = df_all['사용승인일_길이'] == 9\n",
        "df_all[cond]['사용승인일'].unique()\n",
        "df_year = df_all.copy()\n",
        "cond_y9 = df_year['사용승인일_길이'] == 9\n",
        "df_year.loc[cond_y9, '사용승인일'] = '19' + df_year.loc[cond_y9, '사용승인일'].astype(str)\n",
        "cond_y11 = df_year['사용승인일'] == '191979100.0'\n",
        "df_year[cond_y11]\n",
        "df_year.loc[cond_y11, '사용승인일'] = df_year.loc[cond_y11, '사용승인일'].str[2:]\n",
        "df_year['사용승인일_길이'] = df_year['사용승인일'].astype(str).str.len()\n",
        "cond_drop = df_year['사용승인일_길이'].isin([2, 3, 5])\n",
        "df_year = df_year[~cond_drop]\n",
        "df_year.loc[:, '사용승인일'] = df_year['사용승인일'].astype(str).str.strip()\n",
        "# %% 사용승인일(년도) 추출\n",
        "df_year.loc[:, '사용승인일(년도)'] = df_year['사용승인일'].astype(str).str[:4]\n",
        "df_year['사용승인일(년도)'] = df_year['사용승인일(년도)'].astype(str).str.strip()\n",
        "df_year['사용승인일(년도)'].replace('', pd.NA, inplace=True)\n",
        "df_year['사용승인일(년도)'] = pd.to_numeric(df_year['사용승인일(년도)'], errors='coerce').astype('Int64')\n",
        "# %% 승인연도 필터링, 연령 계산 \n",
        "cleaned_year = df_year.dropna(subset='사용승인일(년도)')\n",
        "filltered_year = cleaned_year[cleaned_year['사용승인일(년도)'] >= 1800]\n",
        "filltered_year['연령'] = 2025 - filltered_year['사용승인일(년도)']\n",
        "# %% 건축물 연령 분포 시각화\n",
        "bins = list(range(0, 101, 10)) + [float('inf')]\n",
        "labels = [f\"{i}~{i+10}년\" for i in range(0, 100, 10)] + [\"100년 이상\"]\n",
        "\n",
        "filltered_year['연령대'] = pd.cut(filltered_year['연령'], bins=bins, labels=labels, right=False)\n",
        "# 연령대별 건물 수 집계\n",
        "age_group_counts = filltered_year['연령대'].value_counts().sort_index()\n",
        "# Plotly로 막대 그래프 시각화\n",
        "\n",
        "fig5 = px.bar(\n",
        "    x=age_group_counts.index,\n",
        "    y=age_group_counts.values,\n",
        "    labels={'x': '연령대', 'y': '건물 수'},\n",
        "    title='노후화 구간별 건물 수 분포 (10년 단위)',\n",
        "    text=age_group_counts.values,\n",
        "    color=age_group_counts.values,\n",
        "    color_continuous_scale='Viridis'\n",
        ")\n",
        "\n",
        "fig5.update_layout(\n",
        "    xaxis_title=\"노후화 구간\",\n",
        "    yaxis_title=\"건물 수\",\n",
        "    uniformtext_minsize=8,\n",
        "    uniformtext_mode='hide',\n",
        "    bargap=0.3\n",
        ")\n",
        "\n",
        "fig5.show()\n",
        "# %% 40년 이상은 한 범주로 처리한 것\n",
        "bins = [0, 10, 20, 30, 40, float('inf')]\n",
        "labels = ['0~10년', '10~20년', '20~30년', '30~40년', '40년 이상']\n",
        "\n",
        "# 2. 구간화\n",
        "filltered_year['연령대'] = pd.cut(filltered_year['연령'], bins=bins, labels=labels, right=False)\n",
        "\n",
        "# 3. 집계\n",
        "age_group_counts = filltered_year['연령대'].value_counts(sort=False)\n",
        "\n",
        "# 4. 시각화\n",
        "fig6 = px.bar(\n",
        "    x=age_group_counts.index,\n",
        "    y=age_group_counts.values,\n",
        "    labels={'x': '연령대', 'y': '건물 수'},\n",
        "    title='노후화 구간별 건물 수 분포 (40년 이상 묶음)',\n",
        "    text=age_group_counts.values,\n",
        "    color=age_group_counts.values,\n",
        "    color_continuous_scale='Viridis'\n",
        ")\n",
        "\n",
        "fig6.update_layout(\n",
        "    xaxis_title=\"노후화 구간\",\n",
        "    yaxis_title=\"건물 수\",\n",
        "    uniformtext_minsize=8,\n",
        "    uniformtext_mode='hide',\n",
        "    bargap=0.3\n",
        ")\n",
        "\n",
        "fig6.show()\n",
        "# %% 용도, 노후화 교차\n",
        "bins = [0, 10, 20, 30, 40, float('inf')]\n",
        "labels = ['0~10년', '10~20년', '20~30년', '30~40년', '40년 이상']\n",
        "filltered_year['연령대'] = pd.cut(filltered_year['연령'], bins=bins, labels=labels, right=False)\n",
        "\n",
        "# 2. 교차표 생성: 주용도그룹 × 연령대\n",
        "cross_tab = pd.crosstab(filltered_year['주용도그룹'], filltered_year['연령대'])\n",
        "\n",
        "# 3. Plotly로 교차 막대그래프 (그룹별 스택)\n",
        "fig7 = px.bar(\n",
        "    cross_tab,\n",
        "    x=cross_tab.index,\n",
        "    y=cross_tab.columns,\n",
        "    labels={'value': '건물 수', '주용도그룹': '주용도 그룹', '연령대': '연령대'},\n",
        "    title='주용도 그룹별 연령대별 건물 수',\n",
        "    barmode='stack'  # 누적 막대\n",
        ")\n",
        "\n",
        "fig7.update_layout(\n",
        "    xaxis_title='주용도 그룹',\n",
        "    yaxis_title='건물 수',\n",
        "    legend_title='연령대',\n",
        "    bargap=0.2\n",
        ")\n",
        "\n",
        "fig7.show()\n",
        "# %%"
      ],
      "id": "ad3322b0",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\USER\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}